from vulners import Vulners
import json
import requests

def search_vulnerabilities(service_name, service_version,api_key):
    vulners_api = Vulners(api_key)

    # Search for vulnerabilities related to the service name and version
    vulnerabilities = vulners_api.softwareVulnerabilities(service_name, service_version)

    return vulnerabilities

def display_vulnerabilities_MySQL_Apache(vulnerabilities):
    if vulnerabilities:
        print("Vulnerabilities found:")
        for cve_id, vulnerability_list in vulnerabilities.items():
            for vulnerability in vulnerability_list:
                print("- CVE ID:", cve_id)
                print("  Description:", vulnerability.get('description'))
                print("  CVSS Score:", vulnerability.get('cvss', {}).get('score'))
                print()  # Add a blank line for readability
    else:
        print("No vulnerabilities found.")

# Example usage
api_key = "BVM7XHOM569FOS926JD3G78BHVTSJTSM6N6EZM3AWLYW3NVH5ZIM6SYO0DX67RIL"
service_name = "MySQL"
service_version = "5.7.33"  # Example version
#vulnerabilities = search_vulnerabilities(service_name, service_version,api_key)
#display_vulnerabilities_MySQL_Apache(vulnerabilities)


import subprocess

def run_wpscan_plugins(site_url, api_token):
    try:
        command = ["wpscan", "--url", site_url, "-e", "vp", "--plugins-detection", "mixed"]
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
        stdout, _ = process.communicate()

        if process.returncode != 0:
            print(f"WPScan failed with error code {process.returncode}")
        else:
            print(stdout.decode())
    except subprocess.CalledProcessError as e:
        # Handle any errors that occur during the execution of the command
        print("Error:", e)
    
def wpscan_version(site_url, wp_version,api_token):
    try:
        # Construct the WPScan command with the API token and WordPress version
        command = ['wpscan', '--url', site_url, '--enumerate', 'vp', '--no-update', '--version', wp_version, '--api-token', api_token]

        # Execute the WPScan command and capture the output
        result = subprocess.run(command, capture_output=True, text=True, check=True)
        
        # Extract vulnerability information from WPScan output
        vulnerabilities = extract_vulnerabilities(result.stdout)

        # Print vulnerability information
        print_vulnerabilities(vulnerabilities)

    except subprocess.CalledProcessError as e:
        # Handle any errors that occur during WPScan execution
        print(f"An error occurred: {e}")

def extract_vulnerabilities(wpscan_output):
    # Implement logic to extract vulnerability information from WPScan output
    # For example, you can use regular expressions to find lines containing vulnerability details
    # Return a list of vulnerability strings
    vulnerabilities = []
    for line in wpscan_output.split('\n'):
        if line.startswith('[!]'):
            vulnerabilities.append(line.strip())
    return vulnerabilities

def print_vulnerabilities(vulnerabilities):
    # Print vulnerability information
    for vulnerability in vulnerabilities:
        print(vulnerability)
        
# Example usage
site_url = "http://localhost/sitevul/"
wp_version="5.8.2"
api_token = 'cg686feUrg6XihDs0DbVTFf3sDTGoOExgYc4sC6PD9M'
#run_wpscan_plugins(site_url,api_token)
wpscan_version(site_url,wp_version,api_token)



