from vulners import Vulners
import requests

def search_vulnerabilities(service_name, service_version,api_key):
    vulners_api = Vulners(api_key)

    # Search for vulnerabilities related to the service name and version
    vulnerabilities = vulners_api.softwareVulnerabilities(service_name, service_version)

    return vulnerabilities

def display_vulnerabilities_MySQL_Apache(vulnerabilities):
    if vulnerabilities:
        print("Vulnerabilities found:")
        for cve_id, vulnerability_list in vulnerabilities.items():
            for vulnerability in vulnerability_list:
                print("- CVE ID:", cve_id)
                print("  Description:", vulnerability.get('description'))
                print("  CVSS Score:", vulnerability.get('cvss', {}).get('score'))
                print()  # Add a blank line for readability
    else:
        print("No vulnerabilities found.")

# Example usage
api_key = "BVM7XHOM569FOS926JD3G78BHVTSJTSM6N6EZM3AWLYW3NVH5ZIM6SYO0DX67RIL"
service_name = "MySQL"
service_version = "5.7.33"  # Example version
#vulnerabilities = search_vulnerabilities(service_name, service_version,api_key)
#display_vulnerabilities_MySQL_Apache(vulnerabilities)




def run_wpscan(site_url):


    # Define the WPScan API endpoint URL
    api_url = 'https://wpscan.com/api/v1'

    # Define your API key
    api_key = 'oIyzlOry8Md0TCSV2WWDSffVprwszrA04jrp4DKWHVc'

    # Define the parameters for the vulnerability scan
    params = {
        'url': 'https://example.com',  # Replace with your target WordPress website URL
        'key': api_key,
        'scan_type': 'full_scan'  # Specify the scan type (e.g., full_scan, plugins, themes)
    }

    # Make a GET request to the WPScan API endpoint to initiate the vulnerability scan
    response = requests.get(f'{api_url}/vulnerabilities', params=params)

    # Check if the request was successful (HTTP status code 200)
    if response.status_code == 200:
        # Parse the JSON response
        scan_results = response.json()
        # Process the scan results
        print(scan_results)
    else:
        # Print an error message if the request was not successful
        print(f'Error: {response.status_code} - {response.text}')


# Example usage
site_url = "http://localhost/sitevul/"
run_wpscan(site_url)
