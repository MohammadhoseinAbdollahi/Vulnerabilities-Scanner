import requests
import json
import nmap
import ipaddress
import docker

def is_local(url):
    # List of local IP address ranges
    local_ip_ranges = [
        '127.0.0.0/8',    # Loopback
        '10.0.0.0/8',     # Private network
        '172.16.0.0/12',  # Private network
        '192.168.0.0/16', # Private network
    ]

    # Extract the IP address from the URL
    ip = url.split('/')[0]

    # Check if the IP address is in a local range
    for range in local_ip_ranges:
        if ipaddress.ip_address(ip) in ipaddress.ip_network(range):
            return True

    return False
# Prompt the user for a URL
url = input("Enter the URL of the site: ")
if is_local(url):
    print(f"The URL {url} is local.")
 
    # Initialize Docker client
    client = dockerclient.from_env('auto')

    # Initialize the port scanner
    nm = nmap.PortScanner()

    # Get a list of running containers
    containers = client.containers.list()

    # Initialize an empty list to store the container information
    container_info = []

    # For each container
    for container in containers:
        # Get the container's IP address
        ip = container.attrs['NetworkSettings']['Networks']['bridge']['IPAddress']

        # Scan the container's network
        nm.scan(ip, arguments='-sV')

        # Get the container's ports
        ports = [f"{port}/tcp" for port in nm[ip]['tcp'].keys()]

        # Get the container's service types
        service_types = [nm[ip]['tcp'][port]['name'] for port in nm[ip]['tcp'].keys()]

        # Store the container's information
        container_info.append({
            'Name': container.name,
            'IPv4 Address': ip,
            'URL': f"http://{ip}",
            'Port': ports,
            'Service Type': service_types,
        })

    # Print the container information
    for info in container_info:
        print(info)
    
    
else:
    print(f"The URL {url} is not local.")
    # Use the BuiltWith API to identify the technologies used by the site
    response = requests.get(
        f"https://api.builtwith.com/free1/api.json?KEY=88f62b83-bc8d-4ac5-9aba-95fa22346760&LOOKUP={url}"
    )

    # Check if the request was successful
    if response.status_code == 200:
        groups = response.json()['groups']

        # Initialize an empty list to store the services
        services = []

        # Write the list of technologies to a text file named after the site
        with open(f"{url.replace('/', '_')}_services.txt", "w") as file:
            for group in groups:
                file.write(group['name'] + "\n")
                services.append(group['name'])
                for category in group['categories']:
                    file.write("\t" + category['name'] + "\n")
                    services.append(category['name'])
    else:
        print(f"Error: {response.status_code}")

    # Initialize an empty list to store the vulnerabilities
    vulnerabilities = []

    # For each identified service, use the CVE Details API to get a list of known vulnerabilities
    for service in services:
        try:
            response = requests.get(f"https://cve.circl.lu/api/search/{service}")
            vulnerabilities.extend(response.json())
        except json.JSONDecodeError:
            print(f"No vulnerabilities found for {service} or there was an issue with the API.")

    # Format the list of vulnerabilities
    vulnerabilities_text = json.dumps(vulnerabilities, indent=4)

    # Write the list to a text file named after the site
    with open(f"{url.replace('/', '_')}_vulner.txt", "w") as file:
        file.write(vulnerabilities_text)